
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
    user_id         String     @id @db.Uuid @default(uuid())
    email           String     @unique
    password        String     
    first_name      String
    last_name       String
    created_at      DateTime   @default(now())
    updated_at      DateTime?

    account         account[]
    category        category[]
    transaction     transaction[]
    session         session[]
}

model account {
    account_id      String         @id @db.Uuid @default(uuid())
    user_id         String         @db.Uuid
    account_name    String          
    account_type_id Int             
    balance         Decimal        @default(0.00)
    color_id        Int
    created_at      DateTime       @default(now())
    updated_at      DateTime?

    user            user           @relation(fields: [user_id], references: [user_id])   
    account_type    account_type   @relation(fields: [account_type_id], references: [account_type_id])     
    color           color          @relation(fields: [color_id], references: [color_id])
    transaction     transaction[]
}

model account_type {
    account_type_id   Int          @id  @default(autoincrement())
    account_type_name String       

    account           account[]
}

model category {
    category_id     String          @id @db.Uuid @default(uuid())
    user_id         String?         @db.Uuid
    category_name   String          
    category_type_id   Int
    color_id           Int
    created_at      DateTime
    updated_at      DateTime?

    user            user?            @relation(fields: [user_id], references: [user_id])
    category_type   category_type    @relation(fields: [category_type_id], references: [category_type_id])
    color           color          @relation(fields: [color_id], references: [color_id])
    transaction     transaction[]
}

model category_type {
    category_type_id    Int         @id @default(autoincrement())
    category_type_name  String

    category            category[]
}

model transaction {
    transaction_id      String      @id @db.Uuid @default(uuid())
    user_id             String      @db.Uuid
    account_id          String      @db.Uuid
    category_id         String      @db.Uuid         
    amount              Decimal     
    transaction_type_id Int         
    description         String?
    transaction_date    DateTime    @default(now())
    created_at          DateTime    @default(now())
    updated_at          DateTime?

    user                user        @relation(fields: [user_id], references: [user_id])
    account             account     @relation(fields: [account_id], references: [account_id])
    category            category    @relation(fields: [category_id], references: [category_id])
    transaction_type    transaction_type @relation(fields: [transaction_type_id], references: [transaction_type_id])
}

model transaction_type {
    transaction_type_id     Int         @id @default(autoincrement())
    transaction_type_name   String 

    transaction             transaction[]
}

model color {
    color_id                Int        @id  @default(autoincrement())
    color_name              String
    color_hex               String

    account                 account[]
    category                category[]
}

model session {
    session_id             String          @id @db.Uuid @default(uuid())
    user_id                String          @db.Uuid
    session_hash           String
    created_at             DateTime        @default(now())

    user                   user            @relation(fields: [user_id], references: [user_id])
}